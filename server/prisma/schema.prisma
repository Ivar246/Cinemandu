// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String
  profile_url   String?
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("user")
}

model Artist {
  id              Int           @id @default(autoincrement())
  artist_name     String
  DOB             DateTime?
  profile_url     String?
  profile_summary String
  height          Decimal?
  roles           Artist_Role[]
  MovieArtist     MovieArtist[]
  gallery         Image[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("artist")
}

model Role {
  id              Int               @id @default(autoincrement())
  role_name       String            @unique
  artists         Artist_Role[]
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  MovieArtistRole MovieArtistRole[]

  @@map("role")
}

model Artist_Role {
  id        Int    @id @default(autoincrement())
  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  role_id   Int
  role      Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([artist_id, role_id])
  @@map("artist_role")
}

model Genre {
  id         Int      @id @default(autoincrement())
  genre_name String   @unique
  movie      Movie[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("genre")
}

model Movie {
  id               Int           @id @default(autoincrement())
  title            String
  released_date    DateTime
  runtime          Int
  poster_url       String?
  plot_summary     String?
  trailer_url      String?
  full_movie_url   String?
  audience         Audience?
  format           Format?
  isPublished      Boolean
  MovieArtist      MovieArtist[]
  genre            Genre[]
  production_house String?
  gallery          Image[]
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("movie")
}

model MovieArtist {
  id              Int               @id @default(autoincrement())
  artist_id       Int
  movie_id        Int
  artist          Artist            @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  movie           Movie             @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  MovieArtistRole MovieArtistRole[]

  @@unique([artist_id, movie_id])
  @@map("movie_artist")
}

model MovieArtistRole {
  id              Int         @id @default(autoincrement())
  role_id         Int
  role            Role        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  movie_artist_id Int
  movie_artist    MovieArtist @relation(fields: [movie_artist_id], references: [id], onDelete: Cascade)

  @@map("movie_artist_role")
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  artist_id  Int?
  artist     Artist?  @relation(fields: [artist_id], references: [id])
  movie_id   Int?
  movie      Movie?   @relation(fields: [movie_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("image")
}

enum Audience {
  CHILDREN
  FAMILY
  ADULT
}

enum Format {
  FEATURE_FILM
  SHORT_FILM
  SERIAL
}
